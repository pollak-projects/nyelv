<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    />
    <title>Admin</title>
  </head>
  <body>
    <h1>Admin view</h1>
    <button onclick="Logout()">Log out</button>

    <div class="table-responsive mt-4">
      <table class="table table-striped table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>USERNAME</th>
            <th>FIRST_NAME</th>
            <th>LAST_NAME</th>
            <th>BIRTH DATE</th>
            <th>EMAIL</th>
            <th>ADMIN</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <% felhasznalok.forEach(element => { %>
            <th>
              <input
                id="<%= element.id %>"
                value="<%= element.id %>"
                disabled
              />
            </th>
            <td>
              <input
                id="<%= element.id %>username"
                value="<%= element.username %>"
              />
            </td>
            <td>
              <input
                id="<%= element.id %>"
                value="<%= element.first_name %>"
                disabled
              />
            </td>
            <td>
              <input
                id="<%= element.id %>"
                value="<%= element.last_name %>"
                disabled
              />
            </td>
            <td>
              <input
                id="<%= element.id %>"
                value="<%= element.birth_date %>"
                disabled
              />
            </td>
            <td>
              <input id="<%= element.id %>email" value="<%= element.email %>" />
            </td>
            <td>
              <input
                id="<%= element.id %>user_role"
                value="<%= element.user_role %>"
              />
            </td>
            <td>
              <button
                class="btn btn-danger"
                onclick="DeleteUser('<%= element.id %>')"
              >
                Törlés
              </button>
            </td>
            <td>
              <button
                class="btn btn-warning"
                onclick="UpdateUser('<%= element.id %>')"
              >
                Módosítás
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <div class="table-responsive mt-4">
      <table class="table table-striped table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>SENDER</th>
            <th>MESSAGE</th>
            <th>FLAG</th>
            <th>TIMESTAMP</th>
          </tr>
        </thead>
        <tbody>
          <% chat.forEach(element => { %>
          <tr>
            <td><%= element.id %></td>
            <td><%= element.user.username %></td>
            <td><%= element.message %></td>
            <td><%= element.flag %></td>
            <td><%= element.timestamp %></td>
            <td>
              <button
                class="btn btn-warning"
                onclick="UpdateChat('<%= element.id %>')"
              >
                Flag módosítás
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </body>
</html>

<script>
  function getCookie(cname) {
    let name = cname + "=";
    let ca = document.cookie.split(";");
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }

  function parseJwt(token) {
    var base64Url = token.split(".")[1];
    var base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    var jsonPayload = decodeURIComponent(
      window
        .atob(base64)
        .split("")
        .map(function (c) {
          return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
        })
        .join("")
    );
    return JSON.parse(jsonPayload);
  }

  function UpdateUser(id) {
    const username = document.getElementById(id + "username");
    const email = document.getElementById(id + "email");
    const user_role = document.getElementById(id + "user_role");

    fetch(`http://localhost:3300/user/update?id=${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },

      body: JSON.stringify({
        id: id,
        username: username.value,
        email: email.value,
        user_role: user_role.value,
      }),
    })
      .then((res) => res.json())
      .then(() => {
        location.reload();
      })
      .catch((error) => console.error("Error:", error));
  }

  function DeleteUser(id) {
    const cookie = getCookie("access_token");
    const token = parseJwt(cookie);

    console.log(cookie);
    console.log(token);
    console.log(id);
    console.log(token.sub);

    if (id == token.sub) {
      alert("Nem törölheted magad");
      return;
    }

    fetch(`http://localhost:3300/user/delete?id=${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    }).then((res) => {
      location.reload();
    });
  }

  function UpdateChat(id) {
    fetch(`http://localhost:3300/chat/updateChat?id=${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        flag: 0,
      }),
    })
      .then((res) => res.json())
      .then(() => {
        location.reload();
      })
      .catch((error) => console.error("Error:", error));
  }

  function Logout() {
    fetch("http://localhost:3300/auth/logout", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
    })
      .then((response) => {
        if (response.ok) {
          window.location.href = "/";
        } else {
          console.error("Logout failed");
        }
      })
      .catch((error) => console.error("Error during logout:", error));
  }

  document.addEventListener("DOMContentLoaded", () => {
    const cookie = getCookie("access_token");
    if (!cookie) {
      alert("Access denied. No token found.");
      window.location.href = "http://localhost:5173/main";
      return;
    }

    const token = parseJwt(cookie);
    if (token.user_role !== "admin" && token.user_role !== "moderator") {
      alert("Access denied. Admins and moderators only.");
      window.location.href = "http://localhost:5173/main";
    }
  });
  document.addEventListener("DOMContentLoaded", () => {
    const cookie = getCookie("access_token");
    if (!cookie) {
      alert("Access denied. No token found.");
      window.location.href = "http://localhost:5173/main";
      return;
    }

    const token = parseJwt(cookie);
    if (token.user_role === "moderator") {
      const inputs = document.querySelectorAll(".table-responsive input");
      const buttons = document.querySelectorAll(".table-responsive button");

      inputs.forEach((input) => {
        input.disabled = true;
      });

      buttons.forEach((button) => {
        if (button.innerText === "Módosítás" || button.innerText === "Törlés") {
          button.disabled = true;
        }
      });
    }
  });
</script>
